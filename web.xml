<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app version="1.0">
	
	<!-- General description of the web application -->
	<display-name>X-Cure Chat</display-name>
	<description>
		This is version 1.0 of the X-Cure chat system, based
		on Google Development Toolkit (GWT). It was written by
			Ivan S. Zapreev (ivan.zapreev@gmail.com)
		who should be contacted for more information.
	</description>
    
	<!-- Context initialization parameters that define shared
	String constants used within your application, which
	can be customized by the system administrator who is
	installing your application.  The values actually
	assigned to these parameters can be retrieved in a
	servlet or JSP page by calling:

	String value =
	getServletContext().getInitParameter("name");

	where "name" matches the <param-name> element of
	one of these initialization parameters.

	You can define any number of context initialization
	parameters, including zero.
	-->

	<context-param>
		<param-name>webmaster</param-name>
		<param-value>webmaster@xcure-chat.com</param-value>
		<description>
			The EMAIL address of the administrator to whom questions
			and comments about this application should be addressed.
		</description>
	</context-param>

	<!-- Servlet definitions for the servlets that make up
	your web application, including initialization
	parameters.  With Tomcat, you can also send requests
	to servlets not listed here with a request like this:
	http://localhost:8080/{context-path}/servlet/{classname}
	but this usage is not guaranteed to be portable.  It also
	makes relative references to images and other resources
	required by your servlet more complicated, so defining
	all of your servlets (and defining a mapping to them with
	a servlet-mapping element) is recommended.
	Servlet initialization parameters can be retrieved in a
	servlet or JSP page by calling:
		String value = getServletConfig().getInitParameter("name");
	where "name" matches the <param-name> element of
	one of these initialization parameters.
	You can define any number of servlets, including zero. -->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<description>
			This servlet dispathe request between the JSP and GWT versions of the website
		</description>
		<servlet-class>com.xcurechat.server.DispatcherServlet</servlet-class>
	</servlet>

	<servlet>
		<servlet-name>chat</servlet-name>
		<description>
			This servlet forwards servlet requests to the chat JSP
		</description>
		<servlet-class>com.xcurechat.server.ChatForwardServlet</servlet-class>
	</servlet>

	<servlet>
		<servlet-name>forum</servlet-name>
		<description>
			This servlet forwards servlet requests to the forum JSP
		</description>
		<servlet-class>com.xcurechat.server.ForumForwardServlet</servlet-class>
	</servlet>

	<servlet>
		<servlet-name>info</servlet-name>
		<description>
			This servlet forwards servlet requests to the info JSP
		</description>
		<servlet-class>com.xcurechat.server.InfoForwardServlet</servlet-class>
	</servlet>

	<servlet>
		<servlet-name>main</servlet-name>
		<description>
			This servlet forwards servlet requests to the main JSP
		</description>
		<servlet-class>com.xcurechat.server.MainForwardServlet</servlet-class>
	</servlet>

	<servlet>
		<servlet-name>users</servlet-name>
		<description>
			This servlet manages users: registration/deletion/login/logout
		</description>
		<servlet-class>com.xcurechat.server.UserManagerImpl</servlet-class>
		
		<init-param>
			<param-name>relative-avatar-images-path</param-name>
			<param-value>/images/avatars/profile/</param-value>
		</init-param>
	</servlet>

	<servlet>
		<servlet-name>messages</servlet-name>
		<description>
			This servlet manages user messages: browse/delete/send
		</description>
		<servlet-class>com.xcurechat.server.MessageManagerImpl</servlet-class>
	</servlet>

	<servlet>
		<servlet-name>rooms</servlet-name>
		<description>
			This servlet manages rooms: create/delete/select/update
		</description>
		<servlet-class>com.xcurechat.server.RoomManagerImpl</servlet-class>
	</servlet>

	<servlet>
		<servlet-name>statistics</servlet-name>
		<description>
			This servlet manages user statistics: browse/delete/etc.
		</description>
		<servlet-class>com.xcurechat.server.UserStatisticsImpl</servlet-class>
	</servlet>

	<servlet>
		<servlet-name>forummanager</servlet-name>
		<description>
			This servlet manages the forum messages: browse/delete/etc.
		</description>
		<servlet-class>com.xcurechat.server.ForumManagerImpl</servlet-class>
	</servlet>
    
	<servlet>
		<servlet-name>captcha</servlet-name>
		<description>
			This servlet produces JPEG images that are the CAPTCHA test.
		</description>
		<servlet-class>com.xcurechat.server.CaptchaImageServlet</servlet-class>
	</servlet>

	<servlet>
		<servlet-name>profilefiles</servlet-name>
		<description>
			This servlet manages user profile files, upload and viewing.
		</description>
		<servlet-class>com.xcurechat.server.ProfileFilesManager</servlet-class>
		
		<init-param>
			<param-name>relative-images-path</param-name>
			<param-value>/images/avatars/</param-value>
		</init-param>
	</servlet>

	<servlet>
		<servlet-name>chatfiles</servlet-name>
		<description>
			This servlet manages chat-message files, upload and viewing.
		</description>
		<servlet-class>com.xcurechat.server.ChatFilesManager</servlet-class>
		
		<init-param>
			<param-name>relative-images-path</param-name>
			<param-value>/images/messages/</param-value>
		</init-param>
	</servlet>

	<servlet>
		<servlet-name>avatars</servlet-name>
		<description>
			This servlet manages user profile avatars, upload and viewing.
		</description>
		<servlet-class>com.xcurechat.server.ProfileAvatarManager</servlet-class>
		
		<init-param>
			<param-name>relative-avatar-images-path</param-name>
			<param-value>/images/avatars/profile/</param-value>
		</init-param>
	</servlet>

	<servlet>
		<servlet-name>forumfiles</servlet-name>
		<description>
			This servlet manages forum files, upload and viewing.
		</description>
		<servlet-class>com.xcurechat.server.ForumFilesManager</servlet-class>
	</servlet>
	
	<servlet>
		<servlet-name>log4j-init</servlet-name>
		<servlet-class>com.xcurechat.server.Log4jInit</servlet-class>

		<init-param>
			<param-name>log4j-init-file</param-name>
			<param-value>WEB-INF/classes/log4j.properties</param-value>
		</init-param>

		<load-on-startup>1</load-on-startup>
	</servlet>
	
	<!-- Define mappings that are used by the servlet container to
	translate a particular request URI (context-relative) to a
	particular servlet. It is also legal to define more than one
	mapping for the same servlet, if you wish to. -->
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/dispatcher</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>chat</servlet-name>
		<url-pattern>/chat</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>forum</servlet-name>
		<url-pattern>/forum</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>info</servlet-name>
		<url-pattern>/info</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>main</servlet-name>
		<url-pattern>/main</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>users</servlet-name>
		<url-pattern>/users</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>messages</servlet-name>
		<url-pattern>/messages</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>rooms</servlet-name>
		<url-pattern>/rooms</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>statistics</servlet-name>
		<url-pattern>/statistics</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>forummanager</servlet-name>
		<url-pattern>/forummanager</url-pattern>
	</servlet-mapping>
	
	<servlet-mapping>
		<servlet-name>captcha</servlet-name>
		<url-pattern>/captcha</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>profilefiles</servlet-name>
		<url-pattern>/profilefiles/*</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>chatfiles</servlet-name>
		<url-pattern>/chatfiles/*</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>avatars</servlet-name>
		<url-pattern>/avatars</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>forumfiles</servlet-name>
		<url-pattern>/forumfiles/*</url-pattern>
	</servlet-mapping>

	<!-- Define the default session timeout for your application,
	in minutes.  From a servlet or JSP page, you can modify
	the timeout for a particular session dynamically by using
	HttpSession.getMaxInactiveInterval(). -->
	<session-config>
		<session-timeout>10</session-timeout>    <!-- 10 minutes -->
	</session-config>
	
	<!-- Main XCure-Chat database connection -->
	<resource-ref>
		<description>Main XCure-Chat DB Connection</description>
		<res-ref-name>jdbc/XCURE_CHAT_DB</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<res-auth>Container</res-auth>
	</resource-ref>

	<!-- XCure-chat host to geolocation database connection -->
	<resource-ref>
		<description>XCure-chat host to geolocation DB Connection</description>
		<res-ref-name>jdbc/XCURE_HOSTIP_DB</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<res-auth>Container</res-auth>
	</resource-ref>

	<!-- Add FileCleaner thread stopper for Apache Commons FileUpload -->
	<listener>
		<listener-class>
			org.apache.commons.fileupload.servlet.FileCleanerCleanup
		</listener-class>
	</listener>
    
    <!-- Default page to be served by -->
    <welcome-file-list>
        <welcome-file>XCureChatMain.jsp</welcome-file>
    </welcome-file-list>

  <!-- ================== Built In Filter Definitions ===================== -->

  <!-- NOTE: An SSI Servlet is also available as an alternative SSI         -->
  <!-- implementation. Use either the Servlet or the Filter but NOT both.   -->
  <!--                                                                      -->
  <!-- Server Side Includes processing filter, which processes SSI          -->
  <!-- directives in HTML pages consistent with similar support in web      -->
  <!-- servers like Apache.  Traditionally, this filter is mapped to the    -->
  <!-- URL pattern "*.shtml", though it can be mapped to "*" as it will     -->
  <!-- selectively enable/disable SSI processing based on mime types. For   -->
  <!-- this to work you will need to uncomment the .shtml mime type         -->
  <!-- definition towards the bottom of this file.                          -->
  <!-- The contentType init param allows you to apply SSI processing to JSP -->
  <!-- pages, javascript, or any other content you wish.  This filter       -->
  <!-- supports the following initialization parameters (default values are -->
  <!-- in square brackets):                                                 -->
  <!--                                                                      -->
  <!--   contentType         A regex pattern that must be matched before    -->
  <!--                       SSI processing is applied.                     -->
  <!--                       [text/x-server-parsed-html(;.*)?]              -->
  <!--                                                                      -->
  <!--   debug               Debugging detail level for messages logged     -->
  <!--                       by this servlet.  [0]                          -->
  <!--                                                                      -->
  <!--   expires             The number of seconds before a page with SSI   -->
  <!--                       directives will expire.  [No default]          -->
  <!--                                                                      -->
  <!--   isVirtualWebappRelative                                            -->
  <!--                       Should "virtual" paths be interpreted as       -->
  <!--                       relative to the context root, instead of       -->
  <!--                       the server root?  (0=false, 1=true) [0]        -->

    <filter>
        <filter-name>ssi</filter-name>
        <filter-class>
          org.apache.catalina.ssi.SSIFilter
        </filter-class>
        <init-param>
          <param-name>contentType</param-name>
          <param-value>text/html;charset=UTF-8</param-value>
        </init-param>
        <init-param>
          <param-name>debug</param-name>
          <param-value>0</param-value>
        </init-param>
        <init-param>
          <param-name>expires</param-name>
          <param-value>666</param-value>
        </init-param>
        <init-param>
          <param-name>isVirtualWebappRelative</param-name>
          <param-value>0</param-value>
        </init-param>
    </filter>
    
    <!-- The URL rewrite filter -->
	<filter>
		<filter-name>UrlRewriteFilter</filter-name>
		<filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>
	</filter>

	<!-- This filters allow to add headers to the files, e.g. expiration and cache control headers -->
	<filter>  
		<description>Set HTTP headers for a mapping.</description>  
		<filter-name>HeaderFilterImages</filter-name>  
		<filter-class>com.xcurechat.server.utils.HeaderFilter</filter-class>  
		<init-param>  
			<description>Add an Expires Header</description>  
			<param-name>header</param-name>  
			<param-value>Cache-Control: max-age=4838400, must-revalidate</param-value>  
		</init-param>  
	</filter>
	<filter>  
		<description>Set HTTP headers for a mapping.</description>  
		<filter-name>HeaderFilterMedia</filter-name>  
		<filter-class>com.xcurechat.server.utils.HeaderFilter</filter-class>  
		<init-param>  
			<description>Add an Expires Header</description>  
			<param-name>header</param-name>  
			<param-value>Cache-Control: max-age=9676800, must-revalidate</param-value>  
		</init-param>  
	</filter>
	<filter>  
		<description>Set HTTP headers for a mapping.</description>  
		<filter-name>HeaderFilterCursors</filter-name>  
		<filter-class>com.xcurechat.server.utils.HeaderFilter</filter-class>  
		<init-param>  
			<description>Add an Expires Header</description>  
			<param-name>header</param-name>  
			<param-value>Cache-Control: max-age=9676800, must-revalidate</param-value>  
		</init-param>  
	</filter>
	<filter>  
		<description>Set HTTP headers for a mapping.</description>  
		<filter-name>HeaderFilterJavaScript</filter-name>  
		<filter-class>com.xcurechat.server.utils.HeaderFilter</filter-class>  
		<init-param>  
			<description>Add an Expires Header</description>  
			<param-name>header</param-name>  
			<param-value>Cache-Control: max-age=4838400, must-revalidate</param-value>  
		</init-param>  
	</filter>
	<filter>  
		<description>Set HTTP headers for a mapping.</description>  
		<filter-name>HeaderFilterStatic</filter-name>  
		<filter-class>com.xcurechat.server.utils.HeaderFilter</filter-class>  
		<init-param>  
			<description>Add an Expires Header</description>  
			<param-name>header</param-name>  
			<param-value>Cache-Control: max-age=2419200, must-revalidate</param-value>  
		</init-param>  
	</filter>
	<filter>  
		<description>Set HTTP headers for a mapping.</description>  
		<filter-name>HeaderFilterCss</filter-name>  
		<filter-class>com.xcurechat.server.utils.HeaderFilter</filter-class>  
		<init-param>  
			<description>Add an Expires Header</description>  
			<param-name>header</param-name>  
			<param-value>Cache-Control: max-age=604800, must-revalidate</param-value>  
		</init-param>  
	</filter>
  
  <!-- ==================== Built In Filter Mappings ====================== -->

	<!-- The mapping for the SSI Filter -->
    <filter-mapping>
        <filter-name>ssi</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
	
	<!-- The mapping for the URL rewrite filter -->
	<filter-mapping>
		<filter-name>UrlRewriteFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<filter-mapping>  
		<filter-name>HeaderFilterImages</filter-name>
		<url-pattern>/images/*</url-pattern>  
		<dispatcher>REQUEST</dispatcher>  
	</filter-mapping>
	
	<filter-mapping>  
		<filter-name>HeaderFilterMedia</filter-name>
		<url-pattern>/media/*</url-pattern>  
		<dispatcher>REQUEST</dispatcher>  
	</filter-mapping>
	
	<filter-mapping>  
		<filter-name>HeaderFilterCursors</filter-name>
		<url-pattern>/cursors/*</url-pattern>  
		<dispatcher>REQUEST</dispatcher>  
	</filter-mapping>
	
	<filter-mapping>  
		<filter-name>HeaderFilterJavaScript</filter-name>
		<url-pattern>/javascript/*</url-pattern>  
		<dispatcher>REQUEST</dispatcher>  
	</filter-mapping>
	
	<filter-mapping>  
		<filter-name>HeaderFilterStatic</filter-name>
		<url-pattern>/static/*</url-pattern>  
		<dispatcher>REQUEST</dispatcher>  
	</filter-mapping>
	
	<filter-mapping>  
		<filter-name>HeaderFilterCss</filter-name>
		<url-pattern>/css/*</url-pattern>  
		<dispatcher>REQUEST</dispatcher>  
	</filter-mapping>

</web-app>

